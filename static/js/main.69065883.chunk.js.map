{"version":3,"sources":["panels/Home.js","App.js","index.js"],"names":["Home","title","width","height","scrolling","border","hspace","vspace","allowFullScreen","mozallowfullscreen","webkitallowfullscreen","src","frameBorder","App","useState","activePanel","setUser","size","setPopout","useEffect","a","connect","sendPromise","user","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","widget","JSON","stringify","send","event","console","log","code_data","error_type","error_data","image_type","ReactDOM","render","getElementById"],"mappings":"siBAkCeA,EAxBF,kBAEZ,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,4BACCC,MAAM,WACNC,MAAM,OACNC,OAAO,QACPC,UAAU,KACVC,OAAO,IACPC,OAAO,IACPC,OAAO,IACPC,gBAAgB,OAChBC,mBAAmB,OACnBC,sBAAsB,OACtBC,IAAI,wDACJC,YAAY,UCqBDC,EAtCH,WAAO,IAAD,EACqBC,mBAAS,QAD9B,mBACVC,EADU,aAEcD,mBAAS,OAFvB,mBAEGE,GAFH,aAGWF,mBAAS,kBAAC,IAAD,CAAeG,KAAK,WAHxC,mBAGFC,GAHE,WAKjBC,qBAAU,WAAM,4CAQf,4BAAAC,EAAA,sEACoBC,IAAQC,YAAY,uBADxC,OACOC,EADP,OAECP,EAAQO,GACRL,EAAU,MAHX,4CARe,sBACfG,IAAQG,WAAU,YAAgC,IAAD,IAA5BC,OAAUC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,KACpC,GAAa,yBAATD,EAAiC,CACpC,IAAME,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBG,MAAQJ,EAAKK,OAASL,EAAKK,OAAS,eACpDH,SAASI,KAAKC,WAAWC,aAAaP,OALzB,mCAafQ,KACE,IASH,OACC,6BACC,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAMrB,YAAaA,GAClB,kBAAC,EAAD,SCjCAsB,EAAS,CACT,MAAS,yDACT,KAAQ,CAAC,CACL,MAAS,6CACT,OAAU,iFACV,MAAS,yJACT,SAAY,mBAIpBA,EAASC,KAAKC,UAAUF,GAGxBhB,IAAQmB,KAAK,gBAEbnB,IAAQG,WAAU,SAAAiB,GAAU,IAAD,EAGAA,EAAMhB,OAArBC,EAHe,EAGfA,KAAMC,EAHS,EAGTA,KAED,gDAATD,GAEFgB,QAAQC,IAAIhB,EAAKiB,UAAWjB,EAAKkB,WAAYlB,EAAKmB,YAGxC,4BAATpB,GACCgB,QAAQC,IAAIhB,MAKpBN,IAAQmB,KAAK,wCAAyC,CAClD,SAAY,UACZ,KAAQ,aACR,KAAO,UAAP,OAAkBH,EAAlB,OAGJhB,IAAQmB,KAAK,0BAA2B,CACpCO,WAAY,YAOhBL,QAAQC,IAAIL,KAAKC,UAAUF,IAM3BW,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASqB,eAAe,U","file":"static/js/main.69065883.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\n\nconst Home = () => (\n\t\n\t<Panel>\n\t\t<Div>\n\t\t\t<iframe \n\t\t\t\ttitle=\"radio_vk\"\n\t\t\t\twidth=\"100%\"\n\t\t\t\theight=\"115px\"\n\t\t\t\tscrolling=\"no\"\n\t\t\t\tborder=\"0\"\n\t\t\t\thspace=\"0\"\n\t\t\t\tvspace=\"0\"\n\t\t\t\tallowFullScreen=\"true\"\n\t\t\t\tmozallowfullscreen=\"true\"\n\t\t\t\twebkitallowfullscreen=\"true\"\n\t\t\t\tsrc=\"https://weisshorn.dev.disney.ddgcorp.ru/player_widget\"\n\t\t\t\tframeBorder=\"no\">\n\n\t\t\t</iframe>\n\t\t</Div>\n\t</Panel>\n);\n\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\n\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await connect.sendPromise('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\tconst type = 'list'\n\n\n\treturn (\n\t\t<div>\n\t\t\t<Home />\n\t\t\t<View activePanel={activePanel}>\n\t\t\t\t<Home />\n\t\t\t</View>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\nlet widget = {\n    \"title\": \"Рестораны\",\n    \"rows\": [{\n        \"title\": \"Корюшка\",\n        \"button\": \"Забронировать\",\n        \"descr\": \"Петропавловская крепость, д. 3\",\n        \"cover_id\": \"club189060637\",\n      },]\n}\n\nwidget = JSON.stringify(widget)\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\nconnect.subscribe(event => {\n\n   \n    const { type, data } = event.detail;\n   \n    if (type === 'VKWebAppShowCommunityWidgetPreviewBoxFailed') {\n      // Reading result of the Code Reader\n      console.log(data.code_data, data.error_type, data.error_data);\n    }\n\n    if(type === 'getAppImageUploadServer') {\n        console.log(data);\n    }\n\n  });\n\nconnect.send(\"VKWebAppShowCommunityWidgetPreviewBox\", {\n    \"group_id\": 189060637,\n    \"type\": \"cover_list\",\n    \"code\": `return ${widget};`\n});\n\nconnect.send(\"getAppImageUploadServer\", {\n    image_type: \"510x128\"\n})\n\n\n\n\n\nconsole.log(JSON.stringify(widget))\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}